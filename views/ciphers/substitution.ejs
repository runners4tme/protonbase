<!DOCTYPE html>
<html>

  <% include ../components/head %>

  <body>

    <% include ../components/header %>

    <div class="substitution">

      <h4 class="name">Substitution Cipher</h4>

      <h5 class="description">Encryption</h5>

      <div class="row">
        <p class="descriptionBody col s8 offset-s2">
          A simple substitution cipher is a monoalphabetic cipher where we choose a random number
          between 0 and 25 for each letter of the plaintext and only use it once for that specific letter.
          We are simply replacing one alphabet with another one in no particular order.
          To encrypt our plaintext, we use the randomly selected letters as our encryption key.
          The permutations of keys is 26! This means that there are billions of options that cannot be figured out.
          The simple substitution can not be hack by a brute-force attack.
        </p>
        <p class="descriptionBody col s8 offset-s2">
          Here is the implementation of the encryption process:
        </p>
        <ol class="algorithm col s8 offset-s2">
          <li>Loop through each letter of the plaintext.</li>
          <li>If it is part of it, store the number of the letter in the alphabet order.</li>
          <li>Find the alphabet of that number on the key and add it to the ciphertext.</li>
          <li>If it is not part of it, add it to the ciphertext.</li>
          <li>Return the plaintext and ciphertext.</li>
        </ol>
      </div>

      <h5 class="description">Decryption</h5>

      <div class="row">
        <p class="descriptionBody col s8 offset-s2">
          The simple substitution is a bit complex than the other monoalphabetic ciphers.
          To decrypt it, we need to find the inverse of the letter initially used.
          We then use the key as the alphabet and find the inverse of it. This is as simple as ABC.
        </p>
        <p class="descriptionBody col s8 offset-s2">
          Here is the implementation of the decryption process:
        </p>
        <ol class="algorithm col s8 offset-s2">
          <li>Loop through each letter of the ciphertext.</li>
          <li>If it is part of it, store the number of the letter in the key.</li>
          <li>Find the alphabet of that number on the alphabet order and add it to the plaintext.</li>
          <li>If it is not part of it, add it to the plaintext.</li>
          <li>Return the plaintext and ciphertext.</li>
        </ol>
          <p class="descriptionBody col s8 offset-s2">
          The decryption is quite easy but to hack this cipher is not that simple. We need to be a bit innovative to do this.
          We have to check a word pattern for each word, and each word and the plaintext will always the same word pattern.
          Most common letters are E.T.R.N.I and least common letters are Z.J.K.Q.X.
          So we compute all the possible candidates and then create a mapping for all the possible encryption letters.
          A plaintext word and its ciphertext word will always have the same word pattern, no matter
          which simple substitution key was used to do the encryption.
          Lonh messages are more easier to hack and short messages are very hard to hack.
        </p>
      </div>

      <div class="row">
        <div class="col s8 offset-s2">
          <div class="console">

            <div class="row">
              <div class="col s12">
                <div class="text_container">
                </div>
              </div>
            </div>

            <div class="row">
              <div class="input-field col s12">
                <i class="fa fa-chevron-right"></i>
                <textarea id="textareaSub" class="materialize-textarea"></textarea>
             </div>
            </div>

          </div>
        </div>
      </div>

      <div class="row">
        <div class="col s12">
          <button id="encryptSub" class="activate button">Encrypt</button>
          <button id="decryptSub" class="activate button">Decrypt</button>
        </div>
      </div>

    </div>

    <% include ../components/script %>

  </body>
</html>
