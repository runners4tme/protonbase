<!DOCTYPE html>
<html>

  <% include ../components/head %>

  <body>

    <% include ../components/header %>

    <div class="substitution">

      <h4 class="name">Substitution Cipher</h4>

      <h5 class="description">Encryption</h5>

      <div class="row">
        <p class="descBody col s8 offset-s2">
          A simple substitution cipher is a monoalphabetic cipher where we choose a random number between 0 and 25 for each character of the plaintext
          and only use it once for that specific character. We are simply replacing one alphabet with another one.
          The permutations of keys is 26! This means that there is billions of options that we cannot be figured out.
          The simple substitution can not be hack by a brute-force attack.
          To encrypt our plaintext, we use a key of randomly selected alphabet in no particular order.
        </p>
        <p class="descBody col s8 offset-s2">
          Mathematically we denote the ciphertext as Pie: X -> X.
          Where X is the plaintext and X is the ciphertext
        </p>
      </div>

      <h5 class="description">Decryption</h5>

      <div class="row">
        <p class="descBody col s8 offset-s2">
          The simple substitution is abit complex that the other monoalphabetic ciphers.
          To decrypt it, we need to find the inverse of the letter initially used.
          We simply use the key as the aphabet and find the inverse of it. Simple as ABC.
        </p>
          <p class="descBody col s8 offset-s2">
            Mathematically we denote the ciphertext as pie to the power of -1
          </p>
          <p class="descBody col s8 offset-s2">
          We need to employ a clever way to do this.
          We have to check a word pattern for each word, and each word and the plaintext will always the same word pattern.
          So we compute all the possible candidates and then create a mapping for all the possible encryption letters.
          The longer the message the more easier is is to hack it.
          The english language is rendundant because the letters are not commonly used and A plaintext word and its cipherword will always
          have the same word pattern, no matter which simple substitution key was used to do the encryption.
          Most common letters are E,T,R,N,I,O,A,S and least common letters are Z,J,K,Q,X.
        </p>
      </div>

      <div class="row">
        <div class="col l8 offset-l2">
          <div class="console">

            <div class="row">
              <div class="col l12">
                <div class="plain_container">
                </div>
              </div>
            </div>

            <div class="row">
              <div class="input-field col l12">
                <i class="fa fa-chevron-right"></i>
                <textarea id="textareaSub" class="materialize-textarea"></textarea>
             </div>
            </div>

          </div>
        </div>
      </div>

      <div class="row">
        <div class="col s12">
          <button id="encryptSub" class="activate button">Encrypt</button>
          <button id="decryptSub" class="activate button">Decrypt</button>
        </div>
      </div>

    </div>

    <% include ../components/script %>

  </body>
</html>
