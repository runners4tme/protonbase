#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('protonbase:server');
var http = require('http');
var caeserCipher = require("../modules/caeser");
var affineCipher = require("../modules/affine");
var substitutionCipher = require("../modules/substitution");
var transpositionCipher = require("../modules/transposition");
var vigenereCipher = require("../modules/vigenere");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require("socket.io")(server);

io.on("connection",function(socket){
  var message = "Write your message here!";
  socket.emit("introduction",message);
  socket.on("message",function(payload){
    var cipher = payload.cipher;
    console.log(cipher)
    switch (cipher) {
      case "Affine":
        var response = affineCipher(payload);
        break;
      case "Caeser":
        var response = caeserCipher(payload);
        break;
      case "Sub":
        var response = substitutionCipher(payload);
        break;
      case "Trans":
        var response = transpositionCipher(payload);
        break;
      case "Vig":
        var response = vigenereCipher(payload);
        break;
      default:
        var response = "Unknown cipher";
    }
    console.log(response)
    socket.emit("message",response)
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
